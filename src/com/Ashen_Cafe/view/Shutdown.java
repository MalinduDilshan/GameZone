/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.Ashen_Cafe.view;

import com.Ashen_Cafe.database.DataBaseComputer;
import com.Ashen_Cafe.database.DataBaseConnection;
import com.Ashen_Cafe.database.DataBaseTerminal;
import com.Ashen_Cafe.entity.Computer;
import com.Ashen_Cafe.Support.Message;
import com.Ashen_Cafe.Server.Server;
import com.Ashen_Cafe.database.DataBaseProgressBar;
import com.Ashen_Cafe.entity.ProgressBar;
import com.Ashen_Cafe.entity.Terminal;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 *
 * @author MaLindu DiLshan
 */
public class Shutdown extends javax.swing.JFrame {
    
    public void setMenu(MainMenu menu){
        this.menu=menu;
    }
    /**
     *
     */
    public Shutdown() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_heading = new javax.swing.JLabel();
        jcb_id = new javax.swing.JComboBox();
        lbl_id = new javax.swing.JLabel();
        lbl_pcname = new javax.swing.JLabel();
        lbl_pcstatus = new javax.swing.JLabel();
        txt_pcname = new javax.swing.JTextField();
        txt_pcstatus = new javax.swing.JTextField();
        btn_shutdown = new javax.swing.JButton();
        btn_restart = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        btn_shutdownAll = new javax.swing.JButton();
        lbl_background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Shutdown PC");
        setAlwaysOnTop(true);
        setPreferredSize(new java.awt.Dimension(400, 500));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        lbl_heading.setFont(new java.awt.Font("Adobe Caslon Pro", 2, 36)); // NOI18N
        lbl_heading.setForeground(new java.awt.Color(255, 255, 255));
        lbl_heading.setText("Shutdown PCs...");
        getContentPane().add(lbl_heading);
        lbl_heading.setBounds(70, 10, 260, 60);

        jcb_id.setModel(new javax.swing.DefaultComboBoxModel());
        jcb_id.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_idItemStateChanged(evt);
            }
        });
        getContentPane().add(jcb_id);
        jcb_id.setBounds(170, 80, 140, 30);

        lbl_id.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_id.setForeground(new java.awt.Color(255, 255, 255));
        lbl_id.setText("ID                 :");
        getContentPane().add(lbl_id);
        lbl_id.setBounds(50, 80, 100, 30);

        lbl_pcname.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_pcname.setForeground(new java.awt.Color(255, 255, 255));
        lbl_pcname.setText("PC Name     :");
        getContentPane().add(lbl_pcname);
        lbl_pcname.setBounds(50, 130, 110, 30);

        lbl_pcstatus.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_pcstatus.setForeground(new java.awt.Color(255, 255, 255));
        lbl_pcstatus.setText("PC Status    :");
        getContentPane().add(lbl_pcstatus);
        lbl_pcstatus.setBounds(50, 180, 90, 30);

        txt_pcname.setEditable(false);
        getContentPane().add(txt_pcname);
        txt_pcname.setBounds(170, 130, 140, 30);

        txt_pcstatus.setEditable(false);
        getContentPane().add(txt_pcstatus);
        txt_pcstatus.setBounds(170, 180, 140, 30);

        btn_shutdown.setText("Shutdown");
        btn_shutdown.setToolTipText("click here to shutdown the computer");
        btn_shutdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_shutdownActionPerformed(evt);
            }
        });
        getContentPane().add(btn_shutdown);
        btn_shutdown.setBounds(70, 270, 100, 30);

        btn_restart.setText("Restart");
        btn_restart.setToolTipText("click here to restart the computer");
        btn_restart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_restartActionPerformed(evt);
            }
        });
        getContentPane().add(btn_restart);
        btn_restart.setBounds(240, 270, 100, 30);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(0, 320, 400, 10);

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Shutdown All PCs   :-");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(70, 360, 170, 30);

        btn_shutdownAll.setText("Shutdown All");
        btn_shutdownAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_shutdownAllActionPerformed(evt);
            }
        });
        getContentPane().add(btn_shutdownAll);
        btn_shutdownAll.setBounds(240, 360, 100, 30);

        lbl_background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/Ashen_Cafe/view/BackgroundGameZone.jpg"))); // NOI18N
        lbl_background.setText("Background");
        getContentPane().add(lbl_background);
        lbl_background.setBounds(0, 0, 400, 500);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_shutdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_shutdownActionPerformed
        Server s=new Server();
        Message msg=new Message();
        
        if(jcb_id.getSelectedItem().equals("Select ID"))
            msg.warningMsg("Computer ID should be selected", this);
        else if(status.equals("Server offline"))
            msg.serevrMsg("Sever is offline. Please check your connection"+"\n"+"Command terminated", this);
        else if(status.equals("offline")){
            msg.warningMsg("This PC is offline"+"\n"+"Command terminated", this);
        }
        else{
    int dialogResult = msg.confirmMsg("Do you want to shutdown this PC? ", this);
            if( dialogResult ==  0 ){
            try{
                    status=s.sentDatatoClient(ip,"sd0000");
                }
                catch(IOException ex){
                    //msg.serevrMsg("Error in shutdown method"+"\n"+ex.toString(),this);
                    System.out.println("Error in shutdown method"+"\n"+ex.getMessage());
                }
                catch(Exception ex){
                    msg.warningMsg("Error in Shutdown Form"+"\n"+ex.toString(), this);
                    System.out.println("Error in shutdown method"+"\n"+ex.getMessage()); 
                }
                if(status.trim().equals("sd0000")){    //  make sure online is the keyword
                clearTerminal();
                clearProgressBars();
                menu.setTableShutdown(id);    //thread index and find the thread
                menu.repaintMenuShutdown(id);
                exit();
                System.out.println("shutdown");
                }
                else 
                msg.warningMsg("This PC is already in offline mode", this);
            }                
        }    
    }//GEN-LAST:event_btn_shutdownActionPerformed

    private void btn_restartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_restartActionPerformed
         Server s=new Server();
        Message msg=new Message();
        
        if(jcb_id.getSelectedItem().equals("Select ID"))
            msg.warningMsg("Computer ID should be selected", this);
        else if(status.equals("Server offline"))
            msg.serevrMsg("Sever is offline. Please check your connection"+"\n"+"Command terminated", this);
        else if(status.equals("offline")){
            msg.warningMsg("This PC is offline"+"\n"+"Command terminated", this);
        }
        else{
    int dialogResult = msg.confirmMsg("Do you want to restart this PC? ", this);
            if( dialogResult ==  0 ){
               try{
                    status=s.sentDatatoClient(ip,"re0000");
                }
                catch(IOException ex){
                    //msg.serevrMsg(ex.getMessage(),this);
                    System.out.println("Error in restart method"+"\n"+ex.toString());
                }
                catch(Exception ex){
                    msg.warningMsg("Error in shutdown method"+"\n"+ex.toString(), this);
                    System.out.println("Error in restart method"+"\n"+ex.getMessage());
                }
               if(status.trim().equals("re0000")){    //  make sure online is the keyword  
                clearTerminal();
                clearProgressBars();
                
                menu.setTableShutdown(id);    //thread index and find the thread
                menu.repaintMenuShutdown(id);
                
                exit();
                System.out.println("restart");
               }
               else
                msg.warningMsg("This PC is already in offline mode", this);
            }              
        }
    }//GEN-LAST:event_btn_restartActionPerformed

    private void btn_shutdownAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_shutdownAllActionPerformed
        int flag=0,flagConLost=0;
        Message msg=new Message();
        
         try{
   DataBaseConnection dbcon=new DataBaseConnection();
   
   con=dbcon.connection();
   Statement st=con.createStatement();
int dialogResult = msg.confirmMsg("Do you want to shutdown All PCs? ", this);
            if( dialogResult ==  0 ){
ResultSet rs = st.executeQuery("select*from computers");				
while(rs.next()){
    
    pc=rs.getString(2);
    ip=rs.getString(3);
    System.out.println("IP is"+ip);
    Server s=new Server();
              try{
                    status=s.sentDatatoClient(ip,"sd0000");
                }
                catch(IOException ex){
                    if(ex.getMessage().equals("No route to host: Datagram send failed")){
                    status="Server offline";
                    flagConLost=1;
                    }
                    else{
                    msg.serevrMsg("Error in shutdown method"+"\n"+ex.toString(),pc,this);
                    }
                    System.out.println("Error in shutdown All method"+"\n"+ex.getMessage());
                }
                catch(Exception ex){
                    msg.warningMsg("Error in shutdown method"+"\n"+ex.toString(), this);
                    System.out.println("Error in shutdown All method"+"\n"+ex.getMessage());
                }
                if(status.trim().equals("sd0000")){    //  make sure online is the keyword  
                clearTerminal();
                clearProgressBars();
                
                menu.setTableShutdown(id);    //thread index and find the thread
                menu.repaintMenuShutdown(id);
                
                exit();
                System.out.println("shutdown All");
                }
                else if(status.equals("Server offline")){
                flag=1;
                }   
                else{
                msg.warningMsg(pc+" is already in offline mode", this); 
                }
            }
                if(flag==0){
                   CheckStatus cs=new CheckStatus();
                   cs.setVisible(true);
                }
                if(flagConLost==1){
                   msg.serevrMsg("Sever is offline. Please check your connection"+"\n"+"Command terminated", this);
                }
                
con.close();
        }
    }
catch(SQLException e){
		System.out.println("SQL Error in ShutdownAllPC Form"+"\n"+e.getMessage());
                    }
    }//GEN-LAST:event_btn_shutdownAllActionPerformed

    private void jcb_idItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_idItemStateChanged
       Computer pc=new Computer();
       Message msg=new Message();
       DataBaseComputer db=new DataBaseComputer();
       if(jcb_id.getSelectedItem().equals("Select ID"))
        {
            System.out.println("**********************select id**********************");
            txt_pcname.setText("");
            txt_pcstatus.setText("");
        }
       else{
          id=Integer.parseInt(String.valueOf(jcb_id.getSelectedItem()));
          pc=db.search(id);
          txt_pcname.setText(pc.getPcName());
          ip=pc.getIpAddress();
          
        Server s=new Server();
        try{
                    status=s.sentDatatoClient(ip,"online");
                }
                catch(IOException ex){
                if(ex.getMessage().equals("No route to host: Datagram send failed")){
                    status="Server offline";
                    }
                    else{
                    msg.serevrMsg("Error in online check method"+"\n"+ex.toString(),this);
                    }
                    System.out.println("Error in online check method"+"\n"+ex.getMessage());
                }
                catch(Exception ex){
                    msg.serevrMsg("Error in online check method"+"\n"+ex.toString(),this);
                    System.out.println("Error in online check method"+"\n"+ex.getMessage());
                }
       txt_pcstatus.setText(status.trim()); 
       }
    }//GEN-LAST:event_jcb_idItemStateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
                try{
   DataBaseConnection dbcon=new DataBaseConnection();
   
   con=dbcon.connection();
   Statement st=con.createStatement();
				
ResultSet rs = st.executeQuery("select id from computers");				
jcb_id.addItem("Select ID");
while(rs.next()){											
jcb_id.addItem(rs.getInt(1));			
}	
con.close();
}
catch(SQLException e){
		System.out.println("SQL Error in ShutdownPC Form"+"\n"+e.getMessage());
            }
    }//GEN-LAST:event_formWindowOpened

    
    public void clearTerminal(){
    DataBaseTerminal dbt=new DataBaseTerminal();
    
    Terminal te=new Terminal();
    
        te.setId(id);
        te.setPcname(txt_pcname.getText());
        te.setSystime("00:00:00");
        te.setDuration("0");
        te.setSysdate("2012.12.12");
        
        dbt.update(te, id);
}

    public void clearProgressBars(){
    DataBaseProgressBar dbp=new DataBaseProgressBar();
    
    ProgressBar p=new ProgressBar();
    
        p.setId(id);
        p.setPvalue(0);
        p.setTimeclosed("00:00:00");

        dbp.update(p, id);
}

        public void exit(){
        this.dispose();
}
    /**
     * @param args the command line arguments
     */
    private Connection con;
    private String ip;
    private String pc;
    private int id;
    private MainMenu menu;
    private String status;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_restart;
    private javax.swing.JButton btn_shutdown;
    private javax.swing.JButton btn_shutdownAll;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox jcb_id;
    private javax.swing.JLabel lbl_background;
    private javax.swing.JLabel lbl_heading;
    private javax.swing.JLabel lbl_id;
    private javax.swing.JLabel lbl_pcname;
    private javax.swing.JLabel lbl_pcstatus;
    private javax.swing.JTextField txt_pcname;
    private javax.swing.JTextField txt_pcstatus;
    // End of variables declaration//GEN-END:variables
}
